procedure main() do 
    shared buffer
    shared holder_sem_start
    shared server_sem_start

    shared client_request_sem
    shared client_response_sem
    shared mktp_request_sem
    shared mktp_response_sem
    shared mktp_response_sem

    create_thread(holder)
    create_thread(server)
    create_thread(client)

end


procedure client() do
    while (true) do
        sendRequest()
        signal(client_request_sem) // signal holder to start
        wait(client_response_sem) // wait for response
            // do something
        sleep(1000)
    end
end


procedure holder() do
    start(holder_sem_start, server_sem_start)

    while (true) do 
        wait(client_request_sem) // wait client message
            holderProtocolManager(buffer)
        signal(mktp_request_sem) // signal server to start
        wait(mktp_response_sem) // wait for server response
            // do something (response to client)
    end
end

procedure server() do 
    start(server_sem_start, holder_sem_start)
    while(true) do 
        wait(mktp_request_sem) // wait for message from holder
        serverProtocolManager(buffer)
        signal(mktp_response_sem) // signal holder to start
    end
end

procedure start(mySmaphore, pairSemaphore) do
    declare isPairOn = read(buffer, "S1") // false
    write(buffer, "S1")
    signal(pairSemaphore)
    if not isPairOn then
        // block until pair is done
        wait(mySmaphore)
        read(buffer, "S1") // true
end



declare CONNECTION_SIGNAL="s1"
declare DESCONNECTION_SIGNAL="s0"
declare LIST_FILES="ALL"
declare GET_FILE="ONE"


// server protocol managment
procedure serverProtocolManager(message) {
    if message == DESCONNECTION_SIGNAL then
        handleDesconnection()
    else if message == LIST_FILES then
        handleListFiles()
    else if message == GET_FILE then
        handleGetFile()
    else
        handleBadRequest()
}

procedure handleDesconnection() {
    // do something
}

procedure handleListFiles() {
    // do something
}

